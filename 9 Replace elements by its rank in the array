import java.util.Arrays;
import java.util.HashMap;
import java.util.PriorityQueue;

public class Heap_replace_element_by_rank_9 {

    public static int[] rank(int nums[]) {
        int n = nums.length;
        int[] result = new int[n];

        // Step 1: Add all elements to a min-heap
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int num : nums) {
            pq.add(num);
        }

        // Step 2: Assign rank to each unique element using HashMap
        HashMap<Integer, Integer> map = new HashMap<>();
        int rank = 1;

        while (!pq.isEmpty()) {
            int num = pq.poll();
            if (!map.containsKey(num)) {
                map.put(num, rank++);
            }
        }

        // Step 3: Replace original elements with their rank
        for (int i = 0; i < n; i++) {
            result[i] = map.get(nums[i]);
        }

        return result;
    }

    public static void main(String[] args) {
        int nums[] = {20, 15, 26, 2, 98, 6};
        int res[] = rank(nums);
        System.out.println(Arrays.toString(res));
    }
}

/*
Output:
[4, 3, 5, 1, 6, 2]

Time Complexity: O(n log n)  (priority queue insertion and polling)
Space Complexity: O(n)  (for HashMap, result array, and priority queue)
*/
