import java.util.Arrays;
import java.util.PriorityQueue;

public class Heap_sort_k_sorted_array_7 {

    public static int[] sort_k_sorted_arr(int nums[], int k){
        int n = nums.length;
        int[] arr = new int[n];
        int index = 0;

        PriorityQueue<Integer> pq = new PriorityQueue<>();

        // Step 1: Add first k+1 elements to min-heap
        for(int i = 0; i <= k && i < n; i++){
            pq.add(nums[i]);
        }

        // Step 2: For remaining elements, pop min and add new element
        for(int i = k+1; i < n; i++){
            arr[index++] = pq.poll();
            pq.add(nums[i]);
        }

        // Step 3: Pop remaining elements from heap
        while(!pq.isEmpty()){
            arr[index++] = pq.poll();
        }

        return arr;
    }

    public static void main(String[] args) {
        int nums[] = {3, 6, 1, 7, 5, 9};
        int k = 2;
        int[] sorted = sort_k_sorted_arr(nums, k);
        System.out.println(Arrays.toString(sorted));
    }
}

/*
Output:
[1, 3, 5, 6, 7, 9]

Time Complexity: O(n log k)
Space Complexity: O(k+1)
*/
